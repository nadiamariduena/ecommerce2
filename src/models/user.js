const mongoose = require("mongoose");
//
// password security related
// const bcrypt = require("bcrypt");
const bcrypt = require("bcryptjs");
//

//                       ******
//
//                      userSchema
//
// --------------------------------------------------------
//  You dont see the _id here because it will be auto generated by mongoose
// check it on the auth.js /controller here:
// res.status(200).json({
//   token,
//   user: { _id, firstName, lastName, email, role, fullName },
// });
//
//
const userSchema = new mongoose.Schema(
  {
    firstName: {
      type: String,
      required: true,
      trim: true, //trim will remove any space between the firstName
      min: 3,
      max: 20,
    },
    lastName: {
      type: String,
      required: true,
      trim: true, //trim will remove any space between the firstName
      min: 3,
      max: 20,
    },
    username: {
      type: String,
      required: true,
      trim: true, //trim will remove any space between the firstName
      unique: true, //any username should be unique
      index: true, // is necessary , so that we can QUERY based on the userName
      lowercase: true,
    },
    email: {
      type: String,
      required: true,
      trim: true, //trim will remove any space between the firstName
      unique: true, //any username should be unique
      lowercase: true,
    },
    hash_password: {
      type: String,
      required: true,
      //   YOU CAN specify the LENGTH
    },
    role: {
      type: String,
      enum: ["user", "admin"], //options
      default: "user", //here you setting up what the user's role will be
    },
    contactNumber: {
      type: String,
    },
    profilePicture: {
      type: String,
    },
  },
  { timestamps: true }
);

//                       ******
//
//                  PASSWORD related
//
// --------------------------------------------------------
userSchema.virtual("password").set(function (password) {
  // HASH the goddam plain text password
  // second parameter of hashSync => salting ROUNDS
  // (=> we add a salt 10 times ! and hash after each round again)
  this.hash_password = bcrypt.hashSync(password, 10);

  //
  // this correspond to the salt: ...ord, 10);
  // you are giving it a value from 1 to 10
  // SALT : it serves merely to prevent two users with the same password getting the same hash.
});

// ------------
// VIRTUAL KEY
// ------------

userSchema.virtual("fullName").get(function () {
  return `${this.firstName}, ${this.lastName}`;
});
/*
When I query the database, I would like mongoose
to concatenate firstName and lastName and return a
field called fullName

READ MORE below
*/

// ------------
// methods
// ------------
//  related to password
userSchema.methods = {
  authenticate: function (password) {
    return bcrypt.compareSync(password, this.hash_password);
  },
};
// --------------------------------------------------------

module.exports = mongoose.model("User", userSchema);

/*
// --------------------------------------------------------


          QUESTIONS
// --------------------------------------------------------


1:

WHAT IS THE DIFFERENCE BETWEEN A NORMAL SCHEMA LIKE IN LINE 15
AND THE VIRTUAL SCHEMA IN LINE 84 AND 92



2
_id: user._id }
IS THIS MAKING allusion to the whole data of the user?


3 when to use arrow functions and when not?


                                        ***

                                  COMMON QUESTIONS
                                  What is CRUD?

Create, Read, Update, and Delete (CRUD) are the four basic 
functions that models should be able to do, at most.


              When we are building APIs, we want our models to provide 
              four basic types of functionality. The model must be able
              to Create, Read, Update, and Delete resources. Computer 
              scientists often refer to these functions by the acronym 
              CRUD. A model should have the ability to perform at most 
              these four functions in order to be complete. If an action 
              cannot be described by one of these four operations, then 
              it should potentially be a model of its own.


                  https://www.codecademy.com/articles/what-is-crud


                  In order to build the CRUD methods I will need 
                  the user._id   as a   'owner' attribute, otherwise any
                   user could have access to the tasks list, create 
                   update or delete a task,



                                      ***

                                  Mongoose Virtuals



In Mongoose, a virtual is a property that is not stored 
in MongoDB. Virtuals are typically used for computed properties on documents.


Virtual Setters
You can also use virtuals to set multiple properties at once as an 
alternative to custom setters on normal properties. For example, 
suppose you have two string properties: firstName and lastName. You can create a 
virtual property fullName that lets you set both of these properties at once. 

https://mongoosejs.com/docs/tutorials/virtuals.html
-------


In a setter function, this can be either the document being set 
or the query being run. If you don't want your setter to run when 
you call updateOne(), you add an if 
statement that checks if this is a Mongoose document as shown below.

https://mongoosejs.com/docs/tutorials/getters-setters.html#setters

WHAT IS A QUERY?
Many Mongoose model functions, like find(), return a Mongoose query. 
The Mongoose Query class provides a chaining interface for finding, 
updating, and deleting documents.

const Character = mongoose.model('Character', Schema({
  name: String,
  age: Number
}));

const query = Character.find();
query instanceof mongoose.Query; // true

// Execute the query
const docs = await query;



https://masteringjs.io/tutorials/mongoose/query
*/
